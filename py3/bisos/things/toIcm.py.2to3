RefactoringTool: Skipping optional fixer: buffer
RefactoringTool: Skipping optional fixer: idioms
RefactoringTool: Skipping optional fixer: set_literal
RefactoringTool: Skipping optional fixer: ws_comma
RefactoringTool: Refactored ./things/py3/bisos/things/toIcm.py
RefactoringTool: Files that were modified:
RefactoringTool: ./things/py3/bisos/things/toIcm.py
--- ./things/py3/bisos/things/toIcm.py	(original)
+++ ./things/py3/bisos/things/toIcm.py	(refactored)
@@ -169,7 +169,7 @@
         cmndArgsValid = cmndArgsSpec["0&-1"]
         for each in effectiveArgsList:
             if each in cmndArgsValid:
-                print each
+                print(each)
                 if interactive:
                     #print( str( __doc__ ) )  # This is the Summary: from the top doc-string
                     #version(interactive=True)
@@ -356,32 +356,32 @@
 
          fullPath = format(self.__basePath + '/' + "params/access/cur")
 
-         try: os.makedirs( fullPath, 0777 )
+         try: os.makedirs( fullPath, 0o777 )
          except OSError: pass
 
          parFullPath= format(fullPath + '/accessMethod')
-         try: os.makedirs( parFullPath, 0777 )
+         try: os.makedirs( parFullPath, 0o777 )
          except OSError: pass
          parValueFullPath= format(parFullPath + '/value')
          with open(parValueFullPath, "w") as valueFile:
              valueFile.write(accessMethod +'\n')
 
          parFullPath= format(fullPath + '/targetFqdn')
-         try: os.makedirs( parFullPath, 0777 )
+         try: os.makedirs( parFullPath, 0o777 )
          except OSError: pass
          parValueFullPath= format(parFullPath + '/value')
          with open(parValueFullPath, "w") as valueFile:
              valueFile.write(targetFqdn +'\n')
 
          parFullPath= format(fullPath + '/userName')
-         try: os.makedirs( parFullPath, 0777 )
+         try: os.makedirs( parFullPath, 0o777 )
          except OSError: pass
          parValueFullPath= format(parFullPath + '/value')
          with open(parValueFullPath, "w") as valueFile:
              valueFile.write(userName +'\n')
 
          parFullPath= format(fullPath + '/password')
-         try: os.makedirs( parFullPath, 0777 )
+         try: os.makedirs( parFullPath, 0o777 )
          except OSError: pass
          parValueFullPath= format(parFullPath + '/value')
          with open(parValueFullPath, "w") as valueFile:
@@ -419,18 +419,18 @@
 
          fullPath = format(self.__basePath + '/' + "params/config/cur")
 
-         try: os.makedirs( fullPath, 0777 )
+         try: os.makedirs( fullPath, 0o777 )
          except OSError: pass
 
          parFullPath= format(fullPath + '/interface')
-         try: os.makedirs( parFullPath, 0777 )
+         try: os.makedirs( parFullPath, 0o777 )
          except OSError: pass
          parValueFullPath= format(parFullPath + '/value')
          with open(parValueFullPath, "w") as valueFile:
              valueFile.write(interface +'\n')
 
          parFullPath= format(fullPath + '/interfaceIpAddr')
-         try: os.makedirs( parFullPath, 0777 )
+         try: os.makedirs( parFullPath, 0o777 )
          except OSError: pass
          parValueFullPath= format(parFullPath + '/value')
          with open(parValueFullPath, "w") as valueFile:
@@ -470,9 +470,9 @@
 
          if i == 0: # Timeout
              icm.TM_here()
-             print 'ERROR! could not login with SSH. Here is what SSH said:'
-             print connection.before, connection.after
-             print str(connection)
+             print('ERROR! could not login with SSH. Here is what SSH said:')
+             print(connection.before, connection.after)
+             print(str(connection))
              sys.exit (1)
          if i == 1: # In this case SSH does not have the public key cached.
              icm.TM_here()
@@ -821,7 +821,7 @@
         return icm.EH_problem_usageError()    
 
     parFullPath=ticmoBase
-    try: os.makedirs( parFullPath, 0775 )
+    try: os.makedirs( parFullPath, 0o775 )
     except OSError: pass
 
 
@@ -922,8 +922,8 @@
                                              userName=userName,
                                              password=password)                                               
     
-    print "Targets Access List:"
-    print targetsAccessList
+    print("Targets Access List:")
+    print(targetsAccessList)
 
     return
 
@@ -977,7 +977,7 @@
 
     if targetFqdn != None:
         ephemeraTargetBase = format("/tmp/ephemera-target/" + targetFqdn)
-        try: os.makedirs(ephemeraTargetBase, 0777)
+        try: os.makedirs(ephemeraTargetBase, 0o777)
         except OSError: pass
         linuxTarget = TARGET_Proxy_Linux(basePath=ephemeraTargetBase)
 
